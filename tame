#!/usr/bin/env python3

import os
import pypandoc
import requests

from flask import (
	Flask,
	render_template,
	request,
	send_from_directory,
)
from pathlib import Path

app = Flask("tame")


SKIP_DIRS = (
		'.bak',
		'.git',
		'assets',
		'htbin')


DEFAULT_NOTE_PATH = Path("./README.md").resolve()
NOTES_DIRECTORY = "/dev/null"


############
# FILE OPS #
############

def extract_title(md_path):
	with open(md_path, 'r') as f:
		title = f.readline().strip()

	if (title is None) or (not len(title)):
		return 'Unknown'

	if len(title):
		while title[0] in ('#', ' '):
			if len(title) > 1:
				title = title[1:]
			else:
				title = 'Unknown'

	return title


###############
# GENERIC Ops #
###############

# TODO: Assert path is inside of NOTES_DIRECTORY
def sanitize_path(path):
	NOT_ALLOWED = ('..', '~', '$', '//')
	for pattern in NOT_ALLOWED:
		if pattern in path:
			raise Exception(f'Illegal "{pattern}" in "{path}.')

	while path[0] == '/':
		path = path[1:]

	l = path.split('/')

	return os.sep.join(l)


###########
# GET Ops #
###########

@app.route('/', methods=['GET'])
def index():
	return render_template('index.html')


@app.route('/favicon.ico', methods=['GET'])
def favicon():
	return send_from_directory(
		os.path.join(app.root_path, 'static'),
		'favicon.ico',
		mimetype='image/vnd.microsoft.icon')


@app.route('/get-title', methods=['GET'])
def get_note_title():
	note_path = Path(os.path.join(
		NOTES_DIRECTORY,
		request.args.get('note')
	)).resolve()
	# TODO: sanitize note path

	if not note_path.is_file():
		note_path = DEFAULT_NOTE_PATH

	return extract_title(note_path)


@app.route("/load-note", methods=['GET'])
def load_note():
	note_path = Path(os.path.join(
		NOTES_DIRECTORY,
		request.args.get('note')
	)).resolve()
	# TODO: sanitize note path

	if not note_path.is_file():
		note_path = DEFAULT_NOTE_PATH

	with note_path.open('r') as fp:
		# Discard title line
		_ = fp.readline()

		# Load rest of note
		mdstuff = fp.read()

	# TODO: add tex
	if note_path.suffix == ".md":
		html_data = pypandoc.convert_text(
		mdstuff,
		'html5',
		format='md')

	return html_data


@app.route("/site-directory", methods=['GET'])
def sitedir():
	dirs = []
	files = {}
	for item in NOTES_DIRECTORY.iterdir():
		if item.is_dir():
			dirs.append(item)
		elif item.is_symlink():
			continue
		elif item.is_file():
			if not item.suffix == '.md':
				continue
			try:
				note = item.relative_to(NOTES_DIRECTORY)
			except ValueError:
				continue
			title = extract_title(item)
			while title in files.keys():
				title += ' [duplicate]'
			files[title] = note

	output = ""
	dirs.sort()
	for directory in dirs:
		if directory.startswith('.') or directory.startswith('_') or directory in SKIP_DIRS:
			continue
		output += f'\n<details><summary>{directory}</summary>'
		output = sitedir(os.path.join(root, directory), output)
		output += '\n</details>'

	for item in sorted(files.items()):
		output += f'\n<p><a href="?note={item[1]}">{item[0]}</a></p>'

	return output


############
# POST Ops #
############

# @app.route("/save", methods=['PUT'])
# def save_note():
# 	target = request.form.getvalue('target', None)
# 	data = request.form.getvalue('data', None).replace('\r\n', '\n')
# 
# 	# TODO: Assert data is ascii
# 
# 	sanitize_path(target)
# 	assert(target is not None)
# 	assert(os.path.isfile(target))
# 
# 	if not data.endswith('\n'):
# 		data += '\n'
# 
# 	if target:
# 		with open(target, 'w') as fp:
# 			fp.write(data)


if __name__ == "__main__":
	NOTES_DIRECTORY = Path("./markdown").resolve()
	# TODO: add NOTES_DIRECTORY as argument
	# TODO: check NOTES_DIRECTORY is a directory
	app.run(debug=True)
	# TODO: don't run in debug, but add as an argument
